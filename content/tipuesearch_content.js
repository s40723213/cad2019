var tipuesearch = {"pages": [{'title': 'Week', 'text': 'Week2-5 \n Week6-9 \n Week10-14 \n Week15-18 \n', 'tags': '', 'url': 'Week.html'}, {'title': 'Week2-5', 'text': 'Week 2 \n 建立新的github倉儲 \n 1.到個人網站建立新的倉儲，並且clone到近端(要去mde.tw下載"2019fall可攜套件")。 \n 2.用git config --global user設定名稱、信箱和proxy，之後再用指令git submodule add 建立目錄取下子模型。 \n 3.最後再輸入python -m pip install flask cors即可。 \n 4.備註:要進入近端，必須先進入cmsimde，指令python wsgi.py方能使用。 \n \n Week3 \n Solvespace編譯 \n 1.Y:\\portablegit\\bin\\sh.exe 改名為 sh_rename_for_solvespace.exe。 \n 2.更新github版本到2.13以上。 \n 3.git clone --recurse-submodules https://github.com/solvespace/solvespace.git solvespace \n 4.編輯cmakelist，在713~714行之間加入#字號。 \n 5.把ibpng.dll.a 的編譯, 並改名為 libpng_static.a, 並放到編譯系統的 lib 目錄中。 \n 6.切路徑至build，再執行cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release，輸入mingw32-make。 \n 7.路徑切回solvespace原始碼，建立並進入Build目錄，再次執行cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release，輸入mingw32-make。 \n \n Week4 \n 自行更新網站，拍攝影片及嵌字幕的軟體 \n 1.影片: Share-X \n \n 2.字幕: Aegisub \n \n 3.整合影片和字幕: Arctime \n 註:影片需有課程或自己的浮水印 \n Week5 \n solvespace圖面繪製練習 \n 到http://mde.tw/cad2019/content/Solvespace%20%E6%93%8D%E4%BD%9C.html \n 選擇一個去畫，切記要與小組組員畫不同的。 \n \n 快捷鍵 \n (D)標註尺寸 \n (Q)相同 \n (H)水平共線 \n (V)垂直共線 \n (Shift+X)延伸 \n (M)線中心點 \n', 'tags': '', 'url': 'Week2-5.html'}, {'title': 'Week6-9', 'text': 'Week6 \n 1.參數化零組件繪製 \n 利用slovespace繪製一台兩輪車 \n 操作影片 \n \n 2.網際 V-rep 模型控制 \n 1.下載V-rep和web_vrep2 \n 2.打開V-rep，打開兩輪車 \n 3.到web_vrep2的資料夾打開app.py ->tool->go \n 4.到https://127.0.0.1:5000即可操控 \n \n 3.新增啟動與停止按鈕 \n 1.開啟controls.html \n 2.插入兩行 \n 開始指令<td><a class="pure-button pure-button-primary" href="/do/start">start</a> \n 停止指令</td><a class="pure-button pure-button-primary" href="/do/stop">stop</a></td> \n 3.開啟controls.html確定有兩個按鈕後，開啟vrep_linefollower.py \n 4.到中間加入 \n if direction == \'start\': \n vrep.simxStartSimulation(self.clientID, vrep.simx_opmode_oneshot) \n elif direction == \'stop\': \n else : \n 5.開啟測試 \n 影片操作 \n \n Week7 \n 1.solvespace加入學號 \n 2.solvespace繪圖驗證 \n \n Week8 \n 1.導入Webots \n 1.下載Webots_2019b_rev1.7z \n 2.複製start_mdecourse.bat並更名start_mdecourse -webot.bat \n 3.貼上指令path_webots=%Disk%:\\Webots_2019b_rev1\\msys64\\mingw64\\bin;%Disk%:\\Webots_2019b_rev1\\msys64\\usr\\bin \n 4.按stop,開啟start_mdecourse -webot.bat \n \n 2.開啟網誌 \n 1.開啟leo \n 2.將config中的pelican.leo丟入leo edit裡面 \n 3.SITENAME改為 學號 cad2019 \n \n Week9 \n 期中影片 \n \n', 'tags': '', 'url': 'Week6-9.html'}, {'title': 'Week10-14', 'text': 'Week10 \n Solidworks和NX差異: \n Solidworks最大優點是操作簡單，新手易上手，其功能也滿足大部分公司設計所需，普及程度高，與其他程式互相導入導出的相容性也不錯。 \n NX雖然操作難度比sw高了一些，但是網路上的教學影片也很多，最大特色在於曲面建模功能強大，編成也方便，只要不過於複雜都應付得來。 \n NX繪圖練習:操作影片 \n \n Week12 \n NX12分章翻譯 \n chapter3 \n 3.1總覽 \n \xa0\xa0\xa0 NX12是由曲線所串連起來後，掃描形成實體的。草圖表示該零件的外邊界。 曲線在草繪器中的平面上創建。這些曲線的繪製沒有任何確切的尺寸。維度應用約束和幾何約束以完全約束草圖。 \n 3.2素描環境 \n \xa0\xa0\xa0 在NX 12中，可以使用兩種方法創建草圖。 \n \n ➢選擇菜單→插入→草圖 \n ➢在主工具欄中選擇素描 \n \n \xa0\xa0\xa0 無論哪種情況，都會彈出一個對話框詢問您定義草圖平面。 \n \xa0\xa0\xa0 主屏幕將更改為“草繪環境”。 XY平面突出顯示為用於草繪的默認平面。 這是基本的草圖窗口。 還有一個特殊的素描任務NX 12中的環境，它在主窗口中顯示所有草圖工具。 用於訪問草圖任務環境， \n \xa0\xa0 ➢單擊直接草圖工具欄區域中的更多選項 \n \xa0在完成標誌旁邊有三個有用的選項。 你可以改變框中的草圖名稱。 下一個是定向草圖從而將視圖定向到草圖平面。 如果模型文件是在草繪過程中旋轉，請單擊此圖標以查看在平行於屏幕的平面上繪製草圖重新附著將草圖附加到另一個平面上，基準平面或路徑，或更改草圖方向。 它允許您將草圖重新附加到所需的平面，而無需重新創建所有曲線，尺寸和約束。 \n 3.3草圖曲線工具欄 \n \xa0\xa0 該工具欄包含用於創建常用類型的圖標曲線和样條曲線，編輯，擴展，修剪，圓角等。每種類型的曲線都有不同的方法選擇和創建方法。 讓我們討論最多常用選項 \n 輪廓 \n 此選項會根據您在彈出工具欄中選擇的圖標創建直線和圓弧。 您可以使用坐標系或輸入長度和線的角度 \n 線 \n 此選項將選擇性地僅創建直線 \n 弧 \n 此選項通過兩種方法之一創建弧。 第一個選項以三個順序創建弧 \n 第二個選項創建具有中心點，半徑和後掠角或按中心點的弧帶有起點和終點 \n 圈 \n 創建圓類似於創建圓弧，不同之處在於，圓是封閉的。 \n 快速修剪 \n 這將從曲線的交點修剪延伸的曲線。 該選項顯示為如果每個實體與另一個實體相交，則將它們拆分，並刪除該部分已選擇。 \n Studio樣條線 \n 您可以使用極點或通過點創建基本樣條曲線（B樣條曲線和Bezier）。 \n 所需的曲線度。 樣條線將在第七章中詳細討論（自由格式特徵）。 \n 3.4 約束工具 \n \xa0\xa0\xa0 所有曲線都是通過拾取點創建的。 例如，一條直線有兩個點。在2D環境中，任何點都有兩個自由度，一個沿X，另一個沿Y軸。 點的數量取決於要創建的曲線的類型。 因此，曲線實體自由度數是其包含的點數的兩倍。 這些程度可以通過創建具有固定實體的約束來消除自由度。 實際上，建議通過刪除以下所有自由度（使草圖完全受約束）實體直接或間接地歸屬於固定實體。 可以通過賦予尺寸或幾何特性，如平行度，垂直度等。 \n \xa0\xa0\xa0 在NX 12中，智能約束是自動應用的，即自動尺寸或幾何約束由NX 12解釋。您可以通過單擊“連續自動”來關閉此選項。如下圖所示 \n 尺寸約束 \n 通過給尺寸賦予固定實體（例如軸）的尺寸，可以消除自由度，平面，坐標系或模型中創建的任何現有實體幾何。 這些可以是線性，徑向，角度等。您可以隨時編輯尺寸值在草圖繪製過程中，雙擊尺寸 \n 幾何約束 \n 除了尺寸約束外，還可以給出一些幾何約束來消除自由程度。 它們包括平行，垂直，共線，同心，水平，垂直，等長等。該軟件具有查找以下可能約束的能力：所選實體。 例如，將約束應用到下圖中的行上平行於矩形的左側（該線最初與矩形成一定角度） \n 顯示草圖約束 \n 單擊此圖標將顯示與該特定草圖中的實體相關的所有選項。 \n 顯示 / 刪除約束 \n 該窗口列出了與所選任何實體相關的所有約束和約束類型。 您可以刪除任何列出的約束或更改約束的順序。狀態行中顯示不受約束的自由度數。 所有應通過遵循約束模型來應用約束來消除這些約束。 \n webot tutorial - 1 \n 1.創建新目錄和世界 \n 2.設定格子大小與外牆高度 \n 3.加入木箱調整尺寸 \n 4.複製到有3個木箱並且放到角落 \n 5.加入e-pack機器儲存後模擬 \n 6.alt+左鍵施加外力 \n 7.定義木箱重量才能施加外力 \n 8.創建控制器程式 \n 9.修改程式碼 \n 10.儲存後即可 \n 操作影片 \n \n', 'tags': '', 'url': 'Week10-14.html'}, {'title': 'Week15-17', 'text': "WeeK15 \n 查驗任務影片 \n Week16 \n 小考影片: \n \n Week17 \n 翻譯 Building a clean model tutorial \n At this stage we can start to divide the robot into separate links (remember, we  \n currently have only a single shape for the whole robot). You can do this in two different ways: \n 在這一階段，我們可以開始將機器人劃分為單獨的鏈接（請記住， \n 目前整個機器人只有一個形狀）。 您可以通過兩種不同的方式執行此操作： \n \n Automatic mesh division: this function, which was already described in previous section, will inspect the shape and generate a new shape for all elements that are not linked together via a common edge. This does not always work, but is always worth a try. The function can be accessed with [Menu bar --> Edit --> Grouping/merging --> Divide selected shapes]. \n 自動網格劃分：上一小節已經描述了此功能，它將檢查形狀並為未通過公共邊鏈接在一起的所有元素生成新形狀。 這並不總是有效，但總是值得嘗試的。 可以通過 [ 菜單欄 -> 編輯 -> 分組 / 合併 -> 分割所選形狀 ] 訪問該功能。 \n Manual mesh division: via the the\xa0 triangle edit mode , you can manually select the triangles than logically belong together, then click\xa0 Extract shape . This will generate a new shape in the scene. Delete the selected triangles after that operation. \n 手動網格劃分：通過三角形編輯模式，您可以手動選擇邏輯上不屬於邏輯的三角形，然後單擊“提取形狀”。 這將在場景中生成新形狀。 完成該操作後，刪除選定的三角形。 \n \n In the case of our mesh, method 1 worked fine: \n 對於我們的網格，方法1可以正常工作： \n \n [Divided mesh] \n \n Now, we could further refine/simplify individual shapes. Sometimes also, a shape might look better if its convex hull is used instead. Othertimes, you will have to use several of above's described techniques iteratively, in order to obtain the desired result. Take for instance following mesh: \n 現在，我們可以進一步細化/簡化單個形狀。 有時，如果改用凸包，形狀可能會看起來更好。 有時，您將不得不反複使用上述幾種技術，以獲得所需的結果。 以以下網格為例： \n \n [Imported mesh] \n \n The problem with above's shape is that we cannot simplify it nicely, because of the holes it contains. So we have to go the more complicated way via the\xa0 shape edit mode , where we can extract individual elements that logically belong to the same convex sub-entity. This process can take several iterations: we first extract 3 approximate convex elements. For now, we ignore the triangles that are part of the two holes. While editing a shape in the shape edit mode, it can be convenient to switch the\xa0 visibility layers , in order to see what is covered by other scene items. \n 上面形狀的問題是，由於其中包含孔，我們無法很好地簡化它。 因此，我們必須通過形狀編輯模式進行更複雜的處理，在該模式下，我們可以提取邏輯上屬於同一凸形子實體的單個元素。 此過程可能需要進行多次迭代：我們首先提取3個近似凸元素。 現在，我們忽略作為兩個孔的一部分的三角形。 在形狀編輯模式下編輯形狀時，可以方便地切換可見性圖層，以查看其他場景項所覆蓋的內容。 \n \n [Step 1] \n \n We end up with a toal of three shapes, but two of them will need further improvement. Now we can erase the triangles that are part of the holes. Finally, we extract the convex hull individually for the 3 shapes, then merge them back together with [Menu bar --> Edit --> Grouping/Merging --> merge selected shapes]: \n 我們最終得到三個形狀的總和，但是其中兩個將需要進一步改進。 現在我們可以擦除作為孔的一部分的三角形。 最後，我們分別提取3種形狀的凸包，然後將其與[菜單欄->編輯->分組/合併->合併所選形狀]合併在一起： \n \xa0 \n [Step 2] \n \n In CoppeliaSim, we can enable/disable edge display for each shape. We can also specify an angle that will be taken into account for the edge display. A similar parameter is the\xa0 shading angle , that dictates how facetted the shape will display. Those parameters, and a few others such as the shape\xa0 color , can be adjusted in the\xa0 shape properties . Remember that\xa0 shapes come in various flavours . In this tutorial we have only dealt with simple shapes up to now: a simple shape has a single set of visual attributes (i.e. one color, one shading angle, etc.). If you merge two shapes, then the result will be a simple shape. You can also group shapes, in which case, each shape will retain its visual attributes. \n In next step, we can merge elements that logically belong together (if they are part of the same rigid element, and if they have the same visual attributes). Then we change the visual attributes of the various elements. The easiest ist to adjust a few shapes that have different colors and visual attributes, and if we name the color with a specific string, we can later easily programmatically change that color, also if the shape is part of a compound shape. Then, we select all the shapes that have the same visual attributes, then control-select the shape that was already adjusted, then click\xa0 Apply to selection , once for the\xa0 Colors , once for the\xa0 other properties , in the\xa0 shape properties : this transfers all visual attributes to the selected shapes (including the color name if you provided one).\xa0 \n 在CoppeliaSim中，我們可以啟用/禁用每種形狀的邊緣顯示。我們還可以指定邊緣顯示時要考慮的角度。相似的參數是陰影角，它指示形狀將在多方面顯示。這些參數以及其他一些參數（例如形狀顏色）可以在形狀屬性中進行調整。請記住，形狀有多種風味。到目前為止，在本教程中，我們僅處理簡單的形狀：簡單的形狀具有一組視覺屬性（即一種顏色，一個陰影角度等）。如果合併兩個形狀，則結果將是一個簡單的形狀。您還可以對形狀進行分組，在這種情況下，每個形狀將保留其視覺屬性。 \n 在下一步中，我們可以合併邏輯上屬於一起的元素（如果它們屬於同一剛性元素，並且具有相同的視覺屬性）。然後，我們更改各種元素的視覺屬性。調整具有不同顏色和視覺屬性的幾種形狀的最簡便方法，如果我們使用特定的字符串來命名顏色，則以後可以輕鬆地以編程方式更改該顏色，即使該形狀是複合形狀的一部分。然後，我們選擇所有具有相同視覺屬性的形狀，然後控制選擇已調整的形狀，然後單擊“應用於選擇”，一次是“顏色”，一次是其他屬性，在形狀屬性中：這將轉移所有所選形狀的視覺屬性（如果提供的話，還包括顏色名稱）。 \n 翻譯Webots User Guide \n A\xa0 Solid \xa0node represents a\xa0 rigid body , that is a body in which deformation can be neglected. The distance between any two given points of a rigid body remains constant in time regardless of external forces exerted on it. For example a table, a robot finger phalanx or a wheel are rigid bodies. Soft bodies and articulated objects are not rigid bodies. For example, a rope, a tire, a sponge or an articulated robot arm are not rigid bodies. However, an articulated entity can be broken into several rigid bodies. \n The physics engine of Webots is designed for simulating rigid bodies only. An important step, when designing a simulation, is to break up the various entities into separate rigid bodies. \n To define a rigid body, you will have to create a\xa0 Solid \xa0node. Inside this node you will set up different sub-nodes corresponding to the characteristics of the rigid body. The following\xa0 figure \xa0depicts a rigid body and its sub-nodes. The graphical representation of the\xa0 Solid \xa0node is defined by the\xa0 Shape \xa0nodes populating its\xa0children\xa0list. The collision bounds are defined in its\xa0boundingObject\xa0field. The graphical representation and the collision shape are often but not necessarily identical. Finally, the\xa0physics\xa0field defines if the object belongs to the dynamical or to the static environment. All these sub-nodes are optional, but the\xa0physics\xa0field needs the\xa0boundingObject\xa0to be defined. \n \n The simplest model of a rigid body in Webots having a graphical representation, a physical bounding object and being in the dynamical environment. \n The Geometry box (in\xa0 this figure ) stands for any kind of geometrical primitive. In fact, it can be substituted by a\xa0 Sphere , a\xa0 Box , a\xa0 Cylinder , etc. \n 實體節點表示剛體，即可以忽略變形的剛體。剛體上任意兩個給定點之間的距離在時間上保持恆定，而不管施加在其上的外力如何。例如，桌子，機械手指骨或輪子是剛體。軟體和關節物體不是剛體。例如，繩索，輪胎，海綿或關節式機械臂不是剛性體。但是，可以將一個鉸接的實體分解為幾個剛體。 \n Webots 的物理引擎僅設計用於模擬剛體。設計仿真時，重要的一步是將各個實體分解為單獨的剛體。 \n 要定義剛體，您將必須創建一個實體節點。在此節點內，您將根據剛體的特性設置不同的子節點。下圖描繪了剛體及其子節點。實體節點的圖形表示由填充其子級列表的 Shape 節點定義。碰撞範圍在其 boundingObject 字段中定義。圖形表示和碰撞形狀通常但不一定相同。最後，物理字段定義對像是屬於動態環境還是屬於靜態環境。所有這些子節點都是可選的，但物理場需要定義 boundingObject 。 \n \n Webots 中剛體的最簡單模型，具有圖形表示，物理邊界對象並且處於動態環境中。 \n 幾何框（在此圖中）代表任何類型的幾何圖元。 實際上，它可以用球體，盒子，圓柱體等代替。 \n", 'tags': '', 'url': 'Week15-17.html'}, {'title': 'Week18', 'text': '期末報告影片 \n \n', 'tags': '', 'url': 'Week18.html'}, {'title': 'NOTE', 'text': '', 'tags': '', 'url': 'NOTE.html'}, {'title': 'About', 'text': '個人倉儲:https://github.com/s40723213/cad2019 \n 個人youtube:https://www.youtube.com/channel/UC5SDOqSnuKGLgsWSdmdjDjw?view_as=subscriber \n 此內容管理系統以 https://github.com/mdecourse/cmsimde 作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作. \n 利用 cmsimde 建立靜態網誌方法: 1. 在 github 建立倉儲, git clone 到近端 \n 2. 參考 https://github.com/mdecourse/newcms, 加入除了 cmsimde 目錄外的所有內容 \n 以 git submodule add https://github.com/mdecourse/cmsimde cmsimde \n 建立 cmsimde 目錄, 並從 github 取下子模組內容. \n 3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器. \n 動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端. \n 4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行: \n git clone --recurse-submodules https://github.com/mdecourse/newcms.git \n Develop https://github.com/mdecourse/cmsimde 的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443 就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容. \n cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版. \n init.py 位於 up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數.', 'tags': '', 'url': 'About.html'}]};